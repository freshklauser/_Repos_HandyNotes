Python 3.6.5 |Anaconda, Inc.| (default, Mar 29 2018, 13:32:41) [MSC v.1900 64 bit (AMD64)] on win32
import os
os.getcwd()
Out[3]: 'E:\\_Jun\\_Python\\_Repos_HandyNotes'
PCAP_PKGS = "./_Modules/pyshark/capture_test.pcapng"
import pyshark
import pandas
cap = pyshark.FileCapture(PCAP_PKGS, only_summaries=True)
cap[0]
Out[8]: <PacketSummary DNS: 172.16.253.20 to 172.16.253.5>
flag = 4
while flag:
    print(cap[0])
    flag -= 1
     
2 0.002683 172.16.253.20 172.16.253.5 DNS 115 64 Standard query response 0x0001 PTR 20.253.16.172.in-addr.arpa PTR dns.example.com
2 0.002683 172.16.253.20 172.16.253.5 DNS 115 64 Standard query response 0x0001 PTR 20.253.16.172.in-addr.arpa PTR dns.example.com
2 0.002683 172.16.253.20 172.16.253.5 DNS 115 64 Standard query response 0x0001 PTR 20.253.16.172.in-addr.arpa PTR dns.example.com
2 0.002683 172.16.253.20 172.16.253.5 DNS 115 64 Standard query response 0x0001 PTR 20.253.16.172.in-addr.arpa PTR dns.example.com

# 使用 only_summaries 后，返回的 capture 对象中的数据包将只包含摘要信息
# keep_packets参数，PyShark会将每个数据包添加到 capture 对象中叫 _packet 的列表属性的末尾。当处理大量的数据包时，这个列表将占用大量的内存，因此PyShark提供了这个选项使得内存中一次仅保留一个数据包。
如果 keep_packets 设置为False（默认为True），PyShark在读取新数据包时会将上一个从内存中清除


cap = pyshark.FileCapture(PCAP_PKGS)
for pkg in cap:
     print(pkg.highest_layer)    
DNS
DNS
DNS
DNS
DNS
DNS
ICMP
ICMP
ICMP
ICMP
ICMP
ICMP
ICMP
ICMP
TCP
TCP
TCP
HTTP
TCP
TCP
DATA-TEXT-LINES
TCP
TCP
TCP


cap = pyshark.FileCapture(PCAP_PKGS, display_filter='dns')
for pkg in cap:
	print(pkg.highest_layer)
	
DNS
DNS
DNS
DNS
DNS
DNS


[item for item in dir(cap) if not item.startswith('_')]
Out[19]: 
['DEFAULT_BATCH_SIZE',
 'DEFAULT_LOG_LEVEL',
 'SUMMARIES_BATCH_SIZE',
 'SUPPORTED_ENCRYPTION_STANDARDS',
 'apply_on_packets',
 'clear',
 'close',
 'close_async',
 'debug',
 'encryption',
 'eventloop',
 'get_parameters',
 'include_raw',
 'input_filename',
 'keep_packets',
 'load_packets',
 'loaded',
 'next',
 'next_packet',
 'packets_from_tshark',
 'reset',
 'set_debug',
 'tshark_path',
 'use_json']
 
 
# next()方法使得 capture 对象可以通过for循环进行遍历
# apply_on_packets() 方法是另一种遍历数据包的方式，它接受一个函数作为参数并将之作用于所有的数据包。
cap = pyshark.FileCapture(PCAP_PKGS, keep_packets=False)
def print_highest_layer(pkt):
	print(pkt.highest_layer)
    
cap.apply_on_packets(print_highest_layer)
DNS
DNS
DNS
DNS
DNS
DNS
ICMP
ICMP
ICMP
ICMP
ICMP
ICMP
ICMP
ICMP
TCP
TCP
TCP
HTTP
TCP
TCP
DATA-TEXT-LINES
TCP
TCP
TCP